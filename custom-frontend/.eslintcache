[{"E:\\safi\\FYPMS\\custom-frontend\\src\\index.js":"1","E:\\safi\\FYPMS\\custom-frontend\\src\\App.js":"2","E:\\safi\\FYPMS\\custom-frontend\\src\\store\\index.js":"3","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\modal.js":"4","E:\\safi\\FYPMS\\custom-frontend\\src\\store\\reducers\\AuthReducer.js":"5","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\progressbar.js":"6","E:\\safi\\FYPMS\\custom-frontend\\src\\apis.js":"7","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\navbar.js":"8","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\sidebar.js":"9","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Adm_login.js":"10","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\Dashboard_Pmo.js":"11","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_student\\Dashboard_std.js":"12","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\Dashboard_supervisor.js":"13","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\home.js":"14","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\events.js":"15","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\projects.js":"16","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\student.js":"17","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\user-profile.js":"18","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\Documents.js":"19","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\supervisor.js":"20","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Thr_login.js":"21","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Std_login.js":"22","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\sidebar.js":"23","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\Projects.js":"24","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\ManageProjects.js":"25","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\ProjectProgress.js":"26"},{"size":450,"mtime":1642819952954,"results":"27","hashOfConfig":"28"},{"size":4273,"mtime":1642848649269,"results":"29","hashOfConfig":"28"},{"size":325,"mtime":1642819954194,"results":"30","hashOfConfig":"28"},{"size":1976,"mtime":1642569271183,"results":"31","hashOfConfig":"28"},{"size":2335,"mtime":1642819954194,"results":"32","hashOfConfig":"28"},{"size":283,"mtime":1642569271183,"results":"33","hashOfConfig":"28"},{"size":341,"mtime":1642569271183,"results":"34","hashOfConfig":"28"},{"size":796,"mtime":1642819948591,"results":"35","hashOfConfig":"28"},{"size":3943,"mtime":1642848649562,"results":"36","hashOfConfig":"28"},{"size":2851,"mtime":1642848649427,"results":"37","hashOfConfig":"28"},{"size":1405,"mtime":1642834074110,"results":"38","hashOfConfig":"28"},{"size":154,"mtime":1642832898036,"results":"39","hashOfConfig":"28"},{"size":171,"mtime":1642832898036,"results":"40","hashOfConfig":"28"},{"size":1069,"mtime":1642832897943,"results":"41","hashOfConfig":"28"},{"size":14400,"mtime":1642832897865,"results":"42","hashOfConfig":"28"},{"size":21979,"mtime":1642832897958,"results":"43","hashOfConfig":"28"},{"size":13337,"mtime":1642832897974,"results":"44","hashOfConfig":"28"},{"size":1985,"mtime":1642832898021,"results":"45","hashOfConfig":"28"},{"size":2519,"mtime":1642832897849,"results":"46","hashOfConfig":"28"},{"size":11897,"mtime":1642832898005,"results":"47","hashOfConfig":"28"},{"size":1688,"mtime":1642848649427,"results":"48","hashOfConfig":"28"},{"size":1680,"mtime":1642832898240,"results":"49","hashOfConfig":"28"},{"size":4204,"mtime":1642848649427,"results":"50","hashOfConfig":"28"},{"size":21999,"mtime":1642848649419,"results":"51","hashOfConfig":"28"},{"size":940,"mtime":1642848649277,"results":"52","hashOfConfig":"28"},{"size":557,"mtime":1642848649419,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1w07mve",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\safi\\FYPMS\\custom-frontend\\src\\index.js",[],["111","112"],"E:\\safi\\FYPMS\\custom-frontend\\src\\App.js",["113","114","115","116","117","118","119","120"],"E:\\safi\\FYPMS\\custom-frontend\\src\\store\\index.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\modal.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\store\\reducers\\AuthReducer.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\progressbar.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\apis.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\navbar.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\sidebar.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Adm_login.js",["121"],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\Dashboard_Pmo.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_student\\Dashboard_std.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\Dashboard_supervisor.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\home.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\events.js",["122"],"import React, { useState, useEffect } from \"react\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport axios from \"axios\";\r\nimport Progressbar from \"../progressbar\";\r\nimport { eventUrl } from \"../../apis\";\r\n\r\nexport default function Events() {\r\n  const [getData, setGetData] = useState(false);\r\n  const [editEvent, setEditEvent] = useState(false);\r\n  const [addEvent, setAddEvent] = useState(false);\r\n  const [displayData, setDisplayData] = useState(false);\r\n  const [searchBy, setSearchBy] = useState(\"Name\");\r\n  const [searchValue, setSearchValue] = useState(\"name\");\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [refresh, setRefresh] = useState(false);\r\n\r\n  const api = axios.create({\r\n    baseURL: eventUrl,\r\n  });\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(\"/\")\r\n      .then((res) => {\r\n        setGetData(res.data.events);\r\n      })\r\n      .catch((err) => {\r\n        alert(err);\r\n      });\r\n  }, [refresh]);\r\n\r\n  function handleSearch(e) {\r\n    var getValue = e.target.value;\r\n    if (getValue === \"Name\") {\r\n      setSearchValue(\"name\");\r\n    } else if (getValue === \"Date\") {\r\n      setSearchValue(\"date\");\r\n    } else if (getValue === \"Venue\") {\r\n      setSearchValue(\"venue\");\r\n    } else if (getValue === \"Year\") {\r\n      setSearchValue(\"year\");\r\n    } else if (getValue === \"Semester\") {\r\n      setSearchValue(\"semester\");\r\n    } else if (getValue === \"Details\") {\r\n      setSearchValue(\"details\");\r\n    }\r\n    setSearchBy(getValue);\r\n  }\r\n  function deleteEvent(id) {\r\n    var check = window.confirm(\"Are sure you want to delete the event\");\r\n    if (check) {\r\n      api\r\n        .delete(`/${id}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.status === 200) {\r\n            setRefresh(!refresh);\r\n            alert(\"Event Delete Successfully\");\r\n          }\r\n        })\r\n        .catch((res) => {\r\n          alert(res);\r\n        });\r\n    }\r\n  }\r\n\r\n  function toggleModel(action, event) {\r\n    let date = new Date(event.date);\r\n    setDisplayData({\r\n      ...event,\r\n      convertDate:\r\n        date.getFullYear() + \"/\" + (date.getMonth() + 1) + \"/\" + date.getDate(),\r\n    });\r\n    if (action === \"update\") {\r\n      editEvent ? setEditEvent(false) : setEditEvent(true);\r\n    }\r\n    if (action === \"add\") {\r\n      addEvent ? setAddEvent(false) : setAddEvent(true);\r\n    }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    const name = e.target.name;\r\n    var value = e.target.value;\r\n    setDisplayData({ ...displayData, [name]: value });\r\n  }\r\n  function handleAddSubmit(e) {\r\n    e.preventDefault();\r\n    const options = {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(displayData),\r\n    };\r\n    fetch(`${eventUrl}`, options)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.err.code === 0) {\r\n            setRefresh(!refresh);\r\n            toggleModel(\"add\", false);\r\n            alert(\"Event Create Successfully\");\r\n          } else if (result.err.code === 11000) {\r\n            alert(\r\n              `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n            );\r\n          } else if (result.err.message) {\r\n            alert(result.err.message);\r\n          }\r\n        },\r\n        (error) => {\r\n          alert(error);\r\n        }\r\n      );\r\n  }\r\n  function handleEditSubmit(e) {\r\n    e.preventDefault();\r\n    const options = {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(displayData),\r\n    };\r\n    fetch(`${eventUrl}/${displayData._id}`, options)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.err.code === 0) {\r\n            setRefresh(!refresh);\r\n            toggleModel(\"update\", false);\r\n            alert(\"Event Update Successfully\");\r\n          } else if (result.err.code === 11000) {\r\n            alert(\r\n              `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n            );\r\n          } else if (result.err.message) {\r\n            alert(result.err.message);\r\n          }\r\n        },\r\n        (error) => {\r\n          alert(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='data-container'>\r\n        <div className='data-container-top'>\r\n          <input\r\n            type='search'\r\n            value={searchData}\r\n            onChange={(e) => setSearchData(e.target.value)}\r\n            placeholder={\"Search Student By \" + searchBy}\r\n          />\r\n\r\n          <select onChange={handleSearch}>\r\n            <option value='Name'>Name</option>\r\n            <option value='Date'>Date</option>\r\n            <option value='Venue'>Venue</option>\r\n            <option value='Year'>Year</option>\r\n            <option value='Semester'>Semester</option>\r\n            <option value='Details'>Details</option>\r\n          </select>\r\n          <button\r\n            className='add-data-btn'\r\n            onClick={() => toggleModel(\"add\", false)}\r\n          >\r\n            Add New Event\r\n          </button>\r\n        </div>\r\n        {!getData ? (\r\n          <div>\r\n            <Progressbar visibility={true} />\r\n          </div>\r\n        ) : (\r\n          <table className='table'>\r\n            <thead>\r\n              <tr>\r\n                <th scope='col'>Name</th>\r\n                <th scope='col'>Date</th>\r\n                <th scope='col'>Venue</th>\r\n                <th scope='col'>Year</th>\r\n                <th scope='col'>Semester</th>\r\n                <th scope='col'>Details</th>\r\n                <th colSpan='2' scope='col'>\r\n                  Options\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {/* Call event data here */}\r\n              {getData\r\n                .filter(\r\n                  (event) =>\r\n                    event[searchValue].toString().indexOf(searchData) > -1\r\n                )\r\n                .slice(0)\r\n                .reverse()\r\n                .map((event) => {\r\n                  let date = new Date(event.date);\r\n                  return (\r\n                    <tr key={event._id}>\r\n                      <td data-label='Name'>{event.name}</td>\r\n                      <td data-label='Date'>\r\n                        {date.getFullYear() +\r\n                          \"/\" +\r\n                          (date.getMonth() + 1) +\r\n                          \"/\" +\r\n                          date.getDate()}\r\n                      </td>\r\n                      <td data-label='Venue'>{event.venue}</td>\r\n                      <td data-label='Year'>{event.year}</td>\r\n                      <td data-label='Semester'>{event.semester}</td>\r\n                      <td data-label='Details'>{event.details}</td>\r\n                      <td data-label='Options'>\r\n                        <div className='manage-buttons'>\r\n                          <button\r\n                            className='update-user'\r\n                            title='Edit Student'\r\n                            onClick={() => toggleModel(\"update\", event)}\r\n                          >\r\n                            <FaEdit size='1.5rem' />\r\n                          </button>\r\n                          <button\r\n                            className='delete-user'\r\n                            title='Delete Student'\r\n                          >\r\n                            <AiFillDelete\r\n                              size='1.5rem'\r\n                              onClick={() => deleteEvent(event._id)}\r\n                            />\r\n                          </button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n      {addEvent && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Create a New Event</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={handleAddSubmit}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <input type='text' name='_id' value={displayData._id} hidden />\r\n                <div>\r\n                  <label>Event Name</label>\r\n                  <select\r\n                    name='name'\r\n                    value={displayData.name}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Defense'>Defense</option>\r\n                    <option value='Mid Evaluation'>Mid Evaluation</option>\r\n                    <option value='Final Evaluation'>Final Evaluation</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Event Date</label>\r\n                  <input\r\n                    type='date'\r\n                    name='date'\r\n                    value={displayData.date}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Venue</label>\r\n                  <input\r\n                    type='text'\r\n                    name='venue'\r\n                    value={displayData.venue}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Year</label>\r\n                  <input\r\n                    type='number'\r\n                    name='year'\r\n                    value={displayData.year}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Semester</label>\r\n                  <select\r\n                    name='semester'\r\n                    value={displayData.semester}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Fall'>Fall</option>\r\n                    <option value='Spring'>Spring</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label className='event-details'>Details</label>\r\n                  <textarea\r\n                    type='text'\r\n                    name='details'\r\n                    value={displayData.details}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <button type='submit'>Save Event</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"add\", false)}\r\n                />\r\n              </span>\r\n              <button\r\n                className='close-data'\r\n                onClick={() => toggleModel(\"add\", false)}\r\n              >\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {editEvent && displayData && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Edit Event</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={handleEditSubmit}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <input type='text' name='_id' value={displayData._id} hidden />\r\n                <div>\r\n                  <label>Event Name</label>\r\n                  <select\r\n                    name='name'\r\n                    value={displayData.name}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Defense'>Defense</option>\r\n                    <option value='Mid Evaluation'>Mid Evaluation</option>\r\n                    <option value='Final Evaluation'>Final Evaluation</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Current Date: {displayData.convertDate}</label>\r\n                </div>\r\n                <div>\r\n                  <label>Event Date</label>\r\n                  <input\r\n                    type='date'\r\n                    name='date'\r\n                    value={displayData.date}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Venue</label>\r\n                  <input\r\n                    type='text'\r\n                    name='venue'\r\n                    value={displayData.venue}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Year</label>\r\n                  <input\r\n                    type='number'\r\n                    name='year'\r\n                    value={displayData.year}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Semester</label>\r\n                  <select\r\n                    name='semester'\r\n                    value={displayData.semester}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Fall'>Fall</option>\r\n                    <option value='Spring'>Spring</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label className='event-details'>Details</label>\r\n                  <textarea\r\n                    type='text'\r\n                    name='details'\r\n                    value={displayData.details}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <button type='submit'>Edit Event</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"update\", false)}\r\n                />\r\n              </span>\r\n              <button\r\n                className='close-data'\r\n                onClick={() => toggleModel(\"update\", false)}\r\n              >\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\projects.js",["123","124"],"import React, { useState, useEffect } from \"react\";\r\nimport { projectUrl, students, supervisorsUrl } from \"../../apis\";\r\nimport axios from \"axios\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport Progressbar from \"../progressbar\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\n\r\nexport default function Projects() {\r\n  const [getData, setGetData] = useState(false);\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [searchBy, setSearchBy] = useState(\"Title\");\r\n  const [searchValue, setSearchValue] = useState(\"title\");\r\n  const [supervisorData, setSupervisorData] = useState(false);\r\n  const [searchSupervisor, setSearchSupervisor] = useState(false);\r\n  const [studentData, setStudentData] = useState(false);\r\n  const [editForm, setEditForm] = useState(false);\r\n  const [addProject, setAddProject] = useState(false);\r\n  const [displayData, setDisplayData] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const data = [];\r\n  const api = axios.create({\r\n    baseURL: projectUrl,\r\n  });\r\n\r\n  const studentApi = axios.create({\r\n    baseURL: students,\r\n  });\r\n\r\n  const supervisorApi = axios.create({\r\n    baseURL: supervisorsUrl,\r\n  });\r\n  useEffect(() => {\r\n    api\r\n      .get(\"/\")\r\n      .then((res) => {\r\n        setGetData(res.data.projects);\r\n\r\n        supervisorApi\r\n          .get(\"/\")\r\n          .then((res) => {\r\n            setSupervisorData(res.data.supervisor);\r\n          })\r\n          .catch((err) => {\r\n            alert(err);\r\n          });\r\n\r\n        studentApi\r\n          .get(\"/\")\r\n          .then((res) => {\r\n            setStudentData(res.data);\r\n          })\r\n          .catch((err) => {\r\n            alert(err);\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        alert(err);\r\n      });\r\n  }, [refresh]);\r\n\r\n  function toggleModel(action, project) {\r\n    if (action === \"add\") {\r\n      addProject ? setAddProject(false) : setAddProject(true);\r\n    } else if (action === \"update\") {\r\n      editForm ? setEditForm(false) : setEditForm(true);\r\n    }\r\n    if (project !== null) {\r\n      var supervisorName = \"\";\r\n      supervisorData.map(\r\n        (e) => project.supervisor === e._id && (supervisorName = e.name)\r\n      );\r\n\r\n      setDisplayData({\r\n        _id: project._id,\r\n        title: project.title,\r\n        status: project.status,\r\n        description: project.description,\r\n        objectives: project.objectives,\r\n        batch: project.batch,\r\n        supervisor: supervisorName,\r\n        member_1: project.group[0],\r\n        member_2: project.group[1],\r\n        member_3: project.group[2],\r\n      });\r\n    }\r\n  }\r\n\r\n  function handleSearch(e) {\r\n    setRefresh(!refresh);\r\n    var getValue = e.target.value;\r\n    if (getValue === \"Title\") {\r\n      setSearchValue(\"title\");\r\n    } else if (getValue === \"Project ID\") {\r\n      setSearchValue(\"_id\");\r\n    } else if (getValue === \"Batch\") {\r\n      setSearchValue(\"batch\");\r\n    } else if (getValue === \"Supervisor\") {\r\n      var data = [];\r\n      getData &&\r\n        getData.map((project) =>\r\n          supervisorData.map(\r\n            (sp) =>\r\n              project.supervisor === sp._id &&\r\n              (data = [...data, { ...project, supervisorName: sp.name }])\r\n          )\r\n        );\r\n      setSearchSupervisor(data);\r\n      setSearchValue(\"supervisorName\");\r\n    } else if (getValue === \"Status\") {\r\n      setSearchValue(\"status\");\r\n    } else if (getValue === \"Group Member\") {\r\n      setSearchValue(\"group\");\r\n    }\r\n    setSearchBy(e.target.value);\r\n  }\r\n  function handleChange(e) {\r\n    const name = e.target.name;\r\n    var value = e.target.value;\r\n    setDisplayData({ ...displayData, [name]: value });\r\n  }\r\n  function deleteProject(id) {\r\n    var check = window.confirm(\"Are sure you want to delete the project\");\r\n    if (check) {\r\n      api\r\n        .delete(`/${id}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.status === 200) {\r\n            setRefresh(!refresh);\r\n            alert(\"Project Delete Successfully\");\r\n          }\r\n        })\r\n        .catch((res) => {\r\n          alert(res);\r\n        });\r\n    }\r\n  }\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    var supervisorID;\r\n    supervisorData.map(\r\n      (e) => e.name === displayData.supervisor && (supervisorID = e._id)\r\n    );\r\n    console.log(supervisorID);\r\n\r\n    var manageGroup = [displayData.member_1];\r\n    if (displayData.member_2 !== \"\" && displayData.member_2 !== undefined) {\r\n      manageGroup = [...manageGroup, displayData.member_2];\r\n    }\r\n    if (displayData.member_3 !== \"\" && displayData.member_3 !== undefined) {\r\n      manageGroup = [...manageGroup, displayData.member_3];\r\n    }\r\n    var putProject = {\r\n      title: displayData.title,\r\n      status: displayData.status,\r\n      description: displayData.description,\r\n      objectives: displayData.objectives,\r\n      batch: displayData.batch,\r\n      supervisor: supervisorID,\r\n      group: manageGroup,\r\n    };\r\n    if (editForm) {\r\n      putProject = { ...putProject, _id: displayData._id };\r\n      console.log(putProject);\r\n      const options = {\r\n        method: \"put\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(putProject),\r\n      };\r\n      fetch(`${projectUrl}/${putProject._id}`, options)\r\n        .then((res) => res.json())\r\n        .then(\r\n          (result) => {\r\n            if (result.err.code === 0) {\r\n              setRefresh(!refresh);\r\n              toggleModel(\"update\", null);\r\n              setDisplayData(false);\r\n              alert(\"Project Update Successfully\");\r\n            } else if (result.err.code === 11000) {\r\n              alert(\r\n                `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n              );\r\n            } else if (result.err.message) {\r\n              alert(result.err.message);\r\n            }\r\n          },\r\n          (error) => {\r\n            alert(error);\r\n          }\r\n        );\r\n    }\r\n    if (addProject) {\r\n      console.log(putProject);\r\n      const options = {\r\n        method: \"post\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(putProject),\r\n      };\r\n      fetch(`${projectUrl}`, options)\r\n        .then((res) => res.json())\r\n        .then(\r\n          (result) => {\r\n            if (result.err.code === 0) {\r\n              setRefresh(!refresh);\r\n              toggleModel(\"add\", null);\r\n              setDisplayData(false);\r\n              alert(\"Project Add Successfully\");\r\n            } else if (result.err.code === 11000) {\r\n              alert(\r\n                `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n              );\r\n            } else if (result.err.message) {\r\n              alert(result.err.message);\r\n            }\r\n          },\r\n          (error) => {\r\n            alert(error);\r\n          }\r\n        );\r\n    }\r\n  }\r\n  return (\r\n    <div className='data-container'>\r\n      <div className='data-container-top'>\r\n        <input\r\n          type='search'\r\n          value={searchData}\r\n          onChange={(e) => setSearchData(e.target.value)}\r\n          placeholder={\"Search Project By \" + searchBy}\r\n        />\r\n\r\n        <select onChange={handleSearch}>\r\n          <option value='Title'>Title</option>\r\n          <option value='Project ID'>Project ID</option>\r\n          <option value='Batch'>Batch</option>\r\n          <option value='Status'>Status</option>\r\n          <option value='Supervisor'>Supervisor</option>\r\n          <option value='Group Member'>Group Member</option>\r\n        </select>\r\n        <button\r\n          className='add-data-btn'\r\n          onClick={() => toggleModel(\"add\", null)}\r\n        >\r\n          Create A New Project\r\n        </button>\r\n      </div>\r\n      {!getData ? (\r\n        <div>\r\n          <Progressbar visibility={true} />\r\n        </div>\r\n      ) : searchSupervisor ? (\r\n        searchSupervisor\r\n          .filter(\r\n            (project) =>\r\n              project[searchValue].toString().indexOf(searchData) > -1\r\n          )\r\n          .map((project) => (\r\n            <div className='show-projects'>\r\n              <div>\r\n                <h1 className='project-title'>\r\n                  Project Title : <span>{project.title}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Status : <span>{project.status}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Description : <span>{project.description}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Objectives : <span>{project.objectives}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Batch : <span>{project.batch}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Supervisor : <span> {project.supervisorName}</span>\r\n                </h1>\r\n                <br />\r\n                <h1 className='project-group'>\r\n                  Group Members :\r\n                  {project.group.map((group) => (\r\n                    <span> {group} , </span>\r\n                  ))}\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Project ID : <span>{project._id}</span>\r\n                </h1>\r\n              </div>\r\n              <div className='manage-buttons'>\r\n                <button\r\n                  className='update-user'\r\n                  title='Edit Project'\r\n                  onClick={() => toggleModel(\"update\", project)}\r\n                >\r\n                  <FaEdit size='1.5rem' />\r\n                </button>\r\n                <button\r\n                  className='delete-user'\r\n                  title='Delete Project'\r\n                  onClick={() => deleteProject(project._id)}\r\n                >\r\n                  <AiFillDelete size='1.5rem' />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n      ) : (\r\n        getData &&\r\n        getData\r\n          .filter(\r\n            (project) =>\r\n              project[searchValue].toString().indexOf(searchData) > -1\r\n          )\r\n          .map((project) => (\r\n            <div className='show-projects'>\r\n              <div>\r\n                <h1 className='project-title'>\r\n                  Project Title : <span>{project.title}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Status : <span>{project.status}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Description : <span>{project.description}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Objectives : <span>{project.objectives}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Batch : <span>{project.batch}</span>\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Supervisor :\r\n                  {supervisorData &&\r\n                    supervisorData.map(\r\n                      (e) =>\r\n                        project.supervisor === e._id && <span> {e.name}</span>\r\n                    )}\r\n                </h1>\r\n                <br />\r\n                <h1 className='project-group'>\r\n                  Group Members :\r\n                  {project.group.map((group) => (\r\n                    <span> {group} , </span>\r\n                  ))}\r\n                </h1>\r\n                <br />\r\n                <h1>\r\n                  Project ID : <span>{project._id}</span>\r\n                </h1>\r\n              </div>\r\n              <div className='manage-buttons'>\r\n                <button\r\n                  className='update-user'\r\n                  title='Edit Project'\r\n                  onClick={() => toggleModel(\"update\", project)}\r\n                >\r\n                  <FaEdit size='1.5rem' />\r\n                </button>\r\n                <button\r\n                  className='delete-user'\r\n                  title='Delete Project'\r\n                  onClick={() => deleteProject(project._id)}\r\n                >\r\n                  <AiFillDelete size='1.5rem' />\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))\r\n      )}\r\n      {addProject && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Crate A New Project</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={handleSubmit}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <input type='text' name='_id' value={displayData._id} hidden />\r\n                <div>\r\n                  <label>Project Title</label>\r\n                  <input\r\n                    type='text'\r\n                    name='title'\r\n                    value={displayData.title}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Status</label>\r\n                  <select\r\n                    name='status'\r\n                    value={displayData.status}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Pending'>Pending</option>\r\n                    <option value='Rejected'>Rejected</option>\r\n                    <option value='Approved'>Approved</option>\r\n                    <option value='Working'>Working</option>\r\n                    <option value='Completed'>Complete</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Description</label>\r\n                  <input\r\n                    type='text'\r\n                    name='description'\r\n                    value={displayData.description}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Objective</label>\r\n                  <input\r\n                    type='text'\r\n                    name='objectives'\r\n                    value={displayData.objectives}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Batch</label>\r\n                  <input\r\n                    type='number'\r\n                    name='batch'\r\n                    value={displayData.batch}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Supervisor</label>\r\n                  <input\r\n                    type='text'\r\n                    name='supervisor'\r\n                    value={displayData.supervisor}\r\n                    list='supervisor-list'\r\n                    onChange={handleChange}\r\n                  />\r\n                  <datalist id='supervisor-list'>\r\n                    {supervisorData.map((e) => (\r\n                      <option>{e.name}</option>\r\n                    ))}\r\n                  </datalist>\r\n                </div>\r\n                <div>\r\n                  <label>Group Leader</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_1'\r\n                    value={displayData.member_1}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Group Member</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_2'\r\n                    value={displayData.member_2}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Group Member</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_3'\r\n                    value={displayData.member_3}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                  />\r\n                </div>\r\n                <datalist id='student-list'>\r\n                  {studentData.map((e) => (\r\n                    <option>{e.rollNumber}</option>\r\n                  ))}\r\n                </datalist>\r\n\r\n                <div>\r\n                  <button type='submit'>Add Project</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"add\", null)}\r\n                />\r\n              </span>\r\n              <button\r\n                className='close-data'\r\n                onClick={() => toggleModel(\"add\", null)}\r\n              >\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {editForm && displayData && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Edit Project</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={handleSubmit}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <input type='text' name='_id' value={displayData._id} hidden />\r\n                <div>\r\n                  <label>Project Title</label>\r\n                  <input\r\n                    type='text'\r\n                    name='title'\r\n                    value={displayData.title}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Status</label>\r\n                  <select\r\n                    name='status'\r\n                    value={displayData.status}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <option value='Pending'>Pending</option>\r\n                    <option value='Rejected'>Rejected</option>\r\n                    <option value='Approved'>Approved</option>\r\n                    <option value='Working'>Working</option>\r\n                    <option value='Completed'>Complete</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Description</label>\r\n                  <input\r\n                    type='text'\r\n                    name='description'\r\n                    value={displayData.description}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Objective</label>\r\n                  <input\r\n                    type='text'\r\n                    name='objectives'\r\n                    value={displayData.objectives}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Batch</label>\r\n                  <input\r\n                    type='number'\r\n                    name='batch'\r\n                    value={displayData.batch}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Supervisor</label>\r\n                  <input\r\n                    type='text'\r\n                    name='supervisor'\r\n                    value={displayData.supervisor}\r\n                    list='supervisor-list'\r\n                    onChange={handleChange}\r\n                  />\r\n                  <datalist id='supervisor-list'>\r\n                    {supervisorData.map((e) => (\r\n                      <option>{e.name}</option>\r\n                    ))}\r\n                  </datalist>\r\n                </div>\r\n                <div>\r\n                  <label>Group Leader</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_1'\r\n                    value={displayData.member_1}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Group Member</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_2'\r\n                    value={displayData.member_2}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Group Member</label>\r\n                  <input\r\n                    type='text'\r\n                    name='member_3'\r\n                    value={displayData.member_3}\r\n                    onChange={handleChange}\r\n                    list='student-list'\r\n                    placeholder='None'\r\n                  />\r\n                </div>\r\n                <datalist id='student-list'>\r\n                  {studentData.map((e) => (\r\n                    <option>{e.rollNumber}</option>\r\n                  ))}\r\n                </datalist>\r\n\r\n                <div>\r\n                  <button type='submit'>Edit Project</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"update\", null)}\r\n                />\r\n              </span>\r\n              <button\r\n                className='close-data'\r\n                onClick={() => toggleModel(\"update\", null)}\r\n              >\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\student.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\user-profile.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\Documents.js",["125","126"],"import React, { useState } from \"react\";\r\nimport \"../login/index.css\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { HiDownload } from \"react-icons/hi\";\r\nimport axios from \"axios\";\r\nconst Document = () => {\r\n  const [file, setFile] = useState(\"\");\r\n  const [fileName, setFileName] = useState(\"\");\r\n  const [uploadedFiles, setUploadedFiles] = useState({});\r\n  const onChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n    setFileName(e.target.files[0].name);\r\n  };\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    try {\r\n      const response = axios.post(\"/api/v1/pmo/templates/upload\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n      const { fileName, filePath } = response.data;\r\n      setUploadedFiles({ fileName, filePath });\r\n    } catch (error) {\r\n      console.log(error.response);\r\n    }\r\n  };\r\n  return (\r\n    <div className='maindiv1'>\r\n      <div className='margin-top'>\r\n        <div class='form-container1'>\r\n          <h3 className='padd12'>Upload Template</h3>\r\n          <form class='register-form' onSubmit={handleSubmit}>\r\n            {/* Uncomment the next line to show the success message */}\r\n            {/* <div class=\"success-message\">Success! Thank you for registering</div> */}\r\n\r\n            <input\r\n              id='email1'\r\n              class='form-field widt input1'\r\n              type='file'\r\n              placeholder='file'\r\n              name='file'\r\n              onChange={onChange}\r\n            />\r\n            {/* Uncomment the next line to show the error message */}\r\n            {/* <span id=\"email-error\">Please enter an email address</span> */}\r\n\r\n            <button\r\n              className='form-field button1 docu green'\r\n              type='submit'\r\n              name='upload'\r\n            >\r\n              Upload\r\n            </button>\r\n            <ul className='lists'>\r\n              <li>\r\n                <h3>\r\n                  Supervisor midterm Certifcate{\" \"}\r\n                  <button className='btnn'>\r\n                    <AiFillDelete className='iconic' />\r\n                  </button>{\" \"}\r\n                  <button className='btnn'>\r\n                    <HiDownload className='iconic' />\r\n                  </button>\r\n                </h3>\r\n              </li>\r\n            </ul>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Document;\r\n","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_pmo\\supervisor.js",["127"],"import React, { useState, useEffect } from \"react\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { FaEdit } from \"react-icons/fa\";\r\nimport { AiFillCloseCircle } from \"react-icons/ai\";\r\nimport Progressbar from \"../progressbar\";\r\nimport { supervisorsUrl } from \"../../apis\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Supervisor() {\r\n  const [addSupervisor, setAddSupervisor] = useState(false);\r\n  const [editForm, setEditForm] = useState(false);\r\n  const [searchData, setSearchData] = useState(\"\");\r\n  const [searchBy, setSearchBy] = useState(\"Name\");\r\n  const [getData, setGetData] = useState(false);\r\n  const [displayData, setDisplayData] = useState(false);\r\n  const [refresh, setRefresh] = useState(false);\r\n  const [searchValue, setSearchValue] = useState(\"name\");\r\n\r\n  const api = axios.create({\r\n    baseURL: supervisorsUrl,\r\n  });\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(\"/\")\r\n      .then((res) => {\r\n        setGetData(res.data.supervisor);\r\n      })\r\n      .catch((err) => {\r\n        alert(err);\r\n      });\r\n  }, [refresh]);\r\n\r\n  function deleteStudent(id) {\r\n    var check = window.confirm(\"Are sure you want to delete the supervisor\");\r\n    if (check) {\r\n      api\r\n        .delete(`/${id}`)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res.status === 200) {\r\n            setRefresh(!refresh);\r\n            alert(\"Supervisor Delete Successfully\");\r\n          }\r\n        })\r\n        .catch((res) => {\r\n          alert(res);\r\n        });\r\n    }\r\n  }\r\n\r\n  function toggleModel(e, supervisor) {\r\n    setDisplayData(supervisor);\r\n    if (e === \"add\") {\r\n      addSupervisor ? setAddSupervisor(false) : setAddSupervisor(true);\r\n    } else if (e === \"update\") {\r\n      editForm ? setEditForm(false) : setEditForm(true);\r\n    }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    const name = e.target.name;\r\n    var value = e.target.value;\r\n    setDisplayData({ ...displayData, [name]: value });\r\n  }\r\n\r\n  function handleSearch(e) {\r\n    var getValue = e.target.value;\r\n    if (getValue === \"ID\") {\r\n      setSearchValue(\"_id\");\r\n    } else if (getValue === \"Name\") {\r\n      setSearchValue(\"name\");\r\n    } else if (getValue === \"Department\") {\r\n      setSearchValue(\"department\");\r\n    } else if (getValue === \"Email\") {\r\n      setSearchValue(\"email\");\r\n    } else if (getValue === \"Phone\") {\r\n      setSearchValue(\"phone\");\r\n    }\r\n    setSearchBy(e.target.value);\r\n  }\r\n  function submitSupervisor(e) {\r\n    e.preventDefault();\r\n    const options = {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(displayData),\r\n    };\r\n    fetch(supervisorsUrl, options)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          if (result.err.code === 0) {\r\n            setDisplayData(false);\r\n            setRefresh(!refresh);\r\n            alert(\"Supervisor Add Successfully\");\r\n          } else if (result.err.code === 11000) {\r\n            alert(\r\n              `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n            );\r\n          } else if (result.err.message) {\r\n            alert(result.err.message);\r\n          }\r\n        },\r\n        (error) => {\r\n          alert(error);\r\n        }\r\n      );\r\n  }\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(displayData);\r\n    const options = {\r\n      method: \"put\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(displayData),\r\n    };\r\n    fetch(`${supervisorsUrl}/${displayData._id}`, options)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(result);\r\n          if (result.err.code === 0) {\r\n            setDisplayData(false);\r\n            setRefresh(!refresh);\r\n            alert(\"Supervisor Update Successfully\");\r\n          } else if (result.err.code === 11000) {\r\n            alert(\r\n              `This ${JSON.stringify(result.err.keyValue)} is already in use`\r\n            );\r\n          } else if (result.err.message) {\r\n            alert(result.err.message);\r\n          }\r\n        },\r\n        (error) => {\r\n          alert(error);\r\n        }\r\n      );\r\n  }\r\n  return (\r\n    <div className='data-container'>\r\n      <div className='data-container-top'>\r\n        <input\r\n          type='search'\r\n          value={searchData}\r\n          onChange={(e) => setSearchData(e.target.value)}\r\n          placeholder={\"Search Supervisor By \" + searchBy}\r\n        />\r\n\r\n        <select onChange={handleSearch}>\r\n          <option value='Name'>Name</option>\r\n          <option value='ID'>ID</option>\r\n          <option value='Department'>Department</option>\r\n          <option value='Email'>Email</option>\r\n          <option value='Phone'>Phone</option>\r\n        </select>\r\n        <button className='add-data-btn' onClick={() => toggleModel(\"add\")}>\r\n          Add Supervisor\r\n        </button>\r\n      </div>\r\n      {!getData ? (\r\n        <div>\r\n          <Progressbar visibility={true} />\r\n        </div>\r\n      ) : (\r\n        <table className='table'>\r\n          <thead>\r\n            <tr>\r\n              <th scope='col'>ID</th>\r\n              <th scope='col'>Name</th>\r\n              <th scope='col'>Department</th>\r\n              <th scope='col'>Email</th>\r\n              <th scope='col'>Phone</th>\r\n              <th colSpan='2' scope='col'>\r\n                Options\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {getData\r\n              .filter(\r\n                (supervisor) =>\r\n                  supervisor[searchValue].toString().indexOf(searchData) > -1\r\n              )\r\n              .map((supervisor) => (\r\n                <tr key={supervisor._id}>\r\n                  <td data-label='ID'>{supervisor._id}</td>\r\n                  <td data-label='Name'>{supervisor.name}</td>\r\n                  <td data-label='Department'>{supervisor.department}</td>\r\n                  <td data-label='Email'>{supervisor.email}</td>\r\n                  <td data-label='Phone'>{supervisor.phone}</td>\r\n                  <td data-label='Options'>\r\n                    <div className='manage-buttons'>\r\n                      <button\r\n                        className='update-user'\r\n                        title='Edit Supervisor'\r\n                        onClick={() => toggleModel(\"update\", supervisor)}\r\n                      >\r\n                        <FaEdit size='1.5rem' />\r\n                      </button>\r\n                      <button\r\n                        className='delete-user'\r\n                        title='Delete Supervisor'\r\n                        onClick={() => deleteStudent(supervisor._id)}\r\n                      >\r\n                        <AiFillDelete size='1.5rem' />\r\n                      </button>\r\n                    </div>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n      {addSupervisor && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Add Supervisor</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={submitSupervisor}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <div>\r\n                  <label>Supervisor Name</label>\r\n                  <input type='text' name='name' onChange={handleChange} />\r\n                </div>\r\n                <div>\r\n                  <label>Department</label>\r\n                  <select name='department' onChange={handleChange} required>\r\n                    <option value=''>Select Department</option>\r\n                    <option value='CS'>Computer Science</option>\r\n                    <option value='IT'>Information Security</option>\r\n                    <option value='SE'>Software Engineering</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Email</label>\r\n                  <input type='email' name='email' onChange={handleChange} />\r\n                </div>\r\n                <div>\r\n                  <label>Phone Number</label>\r\n                  <input type='number' name='phone' onChange={handleChange} />\r\n                </div>\r\n                <div>\r\n                  <label>Password</label>\r\n                  <input\r\n                    type='password'\r\n                    name='password'\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <button type='submit'>Add Supervisor</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"add\")}\r\n                />\r\n              </span>\r\n              <button className='close-data' onClick={() => toggleModel(\"add\")}>\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {editForm && displayData && (\r\n        <div className='popup-container'>\r\n          <div className='popup'>\r\n            <h2>Edit Supervisor</h2>\r\n            <div className='form-modal'>\r\n              <form\r\n                className='data-form'\r\n                onSubmit={onSubmit}\r\n                autoComplete='off'\r\n                id='student-form'\r\n              >\r\n                <input type='text' name='_id' value={displayData._id} hidden />\r\n                <div>\r\n                  <label>Supervisor Name</label>\r\n                  <input\r\n                    type='text'\r\n                    name='name'\r\n                    value={displayData.name}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Email</label>\r\n                  <input\r\n                    type='email'\r\n                    name='email'\r\n                    value={displayData.email}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Phone Number</label>\r\n                  <input\r\n                    type='number'\r\n                    name='phone'\r\n                    value={displayData.phone}\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <label>Department</label>\r\n                  <select\r\n                    name='department'\r\n                    value={displayData.department}\r\n                    onChange={handleChange}\r\n                    required\r\n                  >\r\n                    <option value=''>Select Department</option>\r\n                    <option value='CS'>Computer Science</option>\r\n                    <option value='IT'>Information Security</option>\r\n                    <option value='SE'>Software Engineering</option>\r\n                  </select>\r\n                </div>\r\n                <div>\r\n                  <label>Password</label>\r\n                  <input\r\n                    type='password'\r\n                    name='password'\r\n                    onChange={handleChange}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <button type='submit'>Edit Supervisor</button>\r\n                </div>\r\n              </form>\r\n              <span>\r\n                <AiFillCloseCircle\r\n                  size='1.7rem'\r\n                  onClick={() => toggleModel(\"update\")}\r\n                />\r\n              </span>\r\n              <button\r\n                className='close-data'\r\n                onClick={() => toggleModel(\"update\")}\r\n              >\r\n                Close\r\n              </button>\r\n              <form />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Thr_login.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\login\\Std_login.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\sidebar.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\Projects.js",["128","129"],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\ManageProjects.js",[],"E:\\safi\\FYPMS\\custom-frontend\\src\\components\\dashboard_supervisor\\ProjectProgress.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"134","severity":1,"message":"138","line":4,"column":8,"nodeType":"136","messageId":"137","endLine":4,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":33,"column":7,"nodeType":"141","messageId":"142","endLine":33,"endColumn":30},{"ruleId":"139","severity":1,"message":"143","line":74,"column":9,"nodeType":"141","messageId":"142","endLine":74,"endColumn":25},{"ruleId":"139","severity":1,"message":"144","line":82,"column":36,"nodeType":"141","messageId":"142","endLine":82,"endColumn":49},{"ruleId":"139","severity":1,"message":"145","line":83,"column":51,"nodeType":"141","messageId":"142","endLine":83,"endColumn":64},{"ruleId":"139","severity":1,"message":"146","line":84,"column":48,"nodeType":"141","messageId":"142","endLine":84,"endColumn":61},{"ruleId":"139","severity":1,"message":"144","line":85,"column":44,"nodeType":"141","messageId":"142","endLine":85,"endColumn":57},{"ruleId":"134","severity":1,"message":"147","line":27,"column":15,"nodeType":"136","messageId":"137","endLine":27,"endColumn":18},{"ruleId":"148","severity":1,"message":"149","line":32,"column":6,"nodeType":"150","endLine":32,"endColumn":15,"suggestions":"151"},{"ruleId":"134","severity":1,"message":"152","line":21,"column":9,"nodeType":"136","messageId":"137","endLine":21,"endColumn":13},{"ruleId":"148","severity":1,"message":"153","line":60,"column":6,"nodeType":"150","endLine":60,"endColumn":15,"suggestions":"154"},{"ruleId":"134","severity":1,"message":"155","line":8,"column":10,"nodeType":"136","messageId":"137","endLine":8,"endColumn":18},{"ruleId":"134","severity":1,"message":"156","line":9,"column":10,"nodeType":"136","messageId":"137","endLine":9,"endColumn":23},{"ruleId":"148","severity":1,"message":"149","line":32,"column":6,"nodeType":"150","endLine":32,"endColumn":15,"suggestions":"157"},{"ruleId":"134","severity":1,"message":"152","line":21,"column":9,"nodeType":"136","messageId":"137","endLine":21,"endColumn":13},{"ruleId":"148","severity":1,"message":"153","line":60,"column":6,"nodeType":"150","endLine":60,"endColumn":15,"suggestions":"158"},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Dashoard_Pmo' is defined but never used.","react/jsx-pascal-case","Imported JSX component Dashoard_supervisor must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Dashoard_std must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Adm_login must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Thr_login must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Std_login must be in PascalCase or SCREAMING_SNAKE_CASE","'pmo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'api'. Either include it or remove the dependency array.","ArrayExpression",["161"],"'data' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'api', 'studentApi', and 'supervisorApi'. Either include them or remove the dependency array.",["162"],"'fileName' is assigned a value but never used.","'uploadedFiles' is assigned a value but never used.",["163"],["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},{"desc":"167","fix":"170"},"Update the dependencies array to be: [api, refresh]",{"range":"171","text":"172"},"Update the dependencies array to be: [api, refresh, studentApi, supervisorApi]",{"range":"173","text":"174"},{"range":"175","text":"172"},{"range":"176","text":"174"},[1020,1029],"[api, refresh]",[1816,1825],"[api, refresh, studentApi, supervisorApi]",[1048,1057],[1836,1845]]